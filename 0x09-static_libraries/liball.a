!<arch>
0-isupper.c/    0           0     0     644     273       `
#include"main.h"
/**
 * _isupper - entry point
 * _isupper - checks if a character in uppercase
 * @c: the character checked
 * Return: the value 1 if c upper and 0 otherwise
*/
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     349       `
#include"main.h"
/**
 * _memset - fills memory with a constant byte.
 * @s: point to a memory area
 * @b: constant byte
 * @n: first bytes of the memory area pointed to by s
 * Return: a pointer to the memory area s
*/
char *_memset(char *s, char b, unsigned int n)
{
	int i;

	for (i = 0; (unsigned int)i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     361       `
#include"main.h"
/**
 * _strcat - This function appends the src string to the dest string
 * @src: source string
 * @dest: dest string
 * Return: *dest
*/
char *_strcat(char *dest, char *src)
{
	int j;
	int i;

	for (j = 0; dest[j] != '\0'; j++)
	{
		j++;
	}
	for (i = 0; src[i] != '\0'; i++)
	{
		dest[j] = src[i];
		j++;
	}
	dest[j] = '\0';
	return (dest);
}

1-isdigit.c/    0           0     0     644     272       `
#include"main.h"
/**
 * _isdigit - entry point
 * _isdigit - checks for a digit 0 though 9
 * @c: the character to be checked
 * Return: 1 if c is a digit and 0 if otherwise
*/
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     337       `
#include"main.h"
/**
 * _memcpy - copies memory area
 * @src: memory area source
 * @dest: memory area destination
 * @n: number of bytes from memory
 * Return: a pointer to dest
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i;

	for (i = 0; (unsigned int)i < n; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     403       `
#include"main.h"
/**
 * _strncat - This function appends the src string to the dest string
 * @src: source string
 * @dest: dest string
 * @n: int number
 * Return: *dest
*/
char *_strncat(char *dest, char *src, int n)
{
	int i, len;

	for (len = 0; dest[len] != '\0'; len++)
	{
		;
	}
	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[len + i] = src[i];
	}
	dest[len + i] = '\0';
	return (dest);
}


100-atoi.c/     0           0     0     644     450       `
#include<stdio.h>
#include"main.h"
/**
 * _atoi - convert an string to an integer
 * @s: the string in question
 * Return: int
*/
int _atoi(char *s)
{
	int i = 0;
	unsigned int num = 0;
	int sign = 1;

	while (s[i] != '\0')
	{
		if (s[i] == 45)
		{
			sign = sign * (-1);
		}
		else if (s[i] >= 48 && s[i] <= 57)
		{
			num = (num * 10 + (s[i] - 48));
			if (s[i + 1] < 48 || s[i + 1] > 57)
			{
				break;
			}
		}
		i++;
	}
	return (num * sign);
}
2-strchr.c/     0           0     0     644     315       `
#include"main.h"
/**
 * _strchr - locates a character in a string
 * @s: the string in question
 * @c: the char in question
 * Return: returns a pointer, or the null value
*/
char *_strchr(char *s, char c)
{
	int i = 0;

	while (*(s + i) >= '\0')
	{
		if (*(s + i) == c)
			return (&s[i]);
		i++;
	}
	return (0);
}

2-strlen.c/     0           0     0     644     203       `
#include"main.h"
/**
 * _strlen - Entry point
 * @s: character in question
 * Return: integer
*/
int _strlen(char *s)
{
	int count;

	for (count = 0; *s != '\0'; s++)
	{
		count++;
	}
	return (count);
}

2-strncpy.c/    0           0     0     644     385       `
#include"main.h"
/**
 * _strncpy - copies a string to dest
 * @dest: destination string
 * @src: source string
 * @n: number of bytes to copy from src
 * Return: a pointer to the resulting string
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != 0; i++)
	{
		dest[i] = src[i];
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     252       `
#include"main.h"
/**
 * _islower - entry point
 *
 * @c: the char to check
 *
 * -islower - check if a char is lowercase
 *
 * Return: returns 0 or 1
 *
*/
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     245       `
#include"main.h"
/**
 * _puts - prints a string, followed by a new line, to stdout
 *
 * @str: a pointer to the string in question
 * Return: void
*/
void _puts(char *str)
{
	while (*str != 0)
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     343       `
#include"main.h"
/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: int comp
*/
int _strcmp(char *s1, char *s2)
{
	int i;
	int comp = 0;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			comp = ((int) s1[i] - 48) - ((int) s2[i] - 48);
		break;
		}
	}
	return (comp);
}

3-strspn.c/     0           0     0     644     644       `
#include"main.h"
/**
 * _strspn - gets the length of a prefix substring.
 * @s: string in question
 * @accept: strings of bytes that constitutes the substring
 * Return: unsigned int
*/
unsigned int _strspn(char *s, char *accept)
{
	int i = 0, j = 0;
	int l = 0;

	if (*(s + i) == '\0' || *(accept + i) == '\0')
	{
		return (0);
	}
	while (accept[l] != '\0')
	{
		l++;
	}
	while (*(s + i) != '\0')
	{
		while (*(accept + j))
		{
			if (*(s + i) == *(accept + j))
			{
				i++;
				j = 0;
				continue;
			}
			else
			{
				if (j == (l - 1))
				{
					return (i);
				}
				else
				{
					j++;
					continue;
				}
			}
		}
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     271       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic characters
 *
 * @c: the character to be checked
 *
 * Return: _isalpha returns 0 or 1
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     490       `
#include"main.h"
/**
 * _strpbrk - locates the first occurrence in the string s
 * @s: string in question
 * @accept: control string
 * Return: character
*/
char *_strpbrk(char *s, char *accept)
{
	int i = 0, j = 0;

	if (*(s + i) == '\0' || *(accept + j) == '\0')
	{
		return (0);
	}
	while (*(s + i))
	{
		j = 0;
		while (*(accept + j) != '\0')
		{
			if (*(s + i) == *(accept + j))
			{
				return (&(*(s + i)));
			}
			else
			{
				j++;
				continue;
			}
		}
	i++;
	}
	return (0);
}
5-strstr.c/     0           0     0     644     561       `
#include"main.h"
/**
 * _strstr -finds the first occurrence of the substring in the string
 * @haystack: the string in question
 * @needle: the substring
 * Return: a pointer or null
*/
char *_strstr(char *haystack, char *needle)
{
	int i = 0, j = 0, l = 0;

	if (*needle == '\0')
	{
		return (haystack);
	}
	while (*(needle + l) != '\0')
	{
		l++;
	}
	while (*(haystack + i) != '\0')
	{
		for (j = 0; j < l; j++)
		{
			if (haystack[i + j] != needle[j])
			{
				break;
			}
			if (j == l - 1)
			{
				return (haystack + i);
			}
		}
		i++;
	}
	return (0);
}

6-abs.c/        0           0     0     644     233       `
#include"main.h"
/**
 * _abs - compute the absolute value of an integer
 * @n: the number to be computed
 * Return: _abs returns an int
 */
int _abs(int n)
{

	if (n > 0)
	{
		return (n);
	}
	else
	{
		return (-n);
	}
	return (0);
}

9-strcpy.c/     0           0     0     644     453       `
#include"main.h"
/**
 * _strcpy - copies a string pointed to including the null byte to the buffer
 * @dest: the buffer
 * @src: the string pointed to in question
 * Return: the pointer to dest
*/
char *_strcpy(char *dest, char *src)
{
	int i, count;

	count = 0;
	while (src[count] != '\0')
	{
		count++;
	}

	for (i = 0; i <= count + 1; i++)
	{
		if (i != count + 1)
		{
			dest[i] = src[i];
		}
		else
		{
			dest[i] = '\0';
		}
	}
	return (dest);
}

_putchar.c/     0           0     0     644     246       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
*/
int _putchar(char c)
{
	return (write(1, &c, 1));
}
